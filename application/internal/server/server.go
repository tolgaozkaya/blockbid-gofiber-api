package server

import (
	"encoding/json"
	"log"
	"net/http"
	"time"

	"blockchain-smart-tender-platform/app/routes"
	"blockchain-smart-tender-platform/internal/constants"

	Ihaleler "blockchain-smart-tender-platform/app/controllers/ihaleler"
	Login "blockchain-smart-tender-platform/app/controllers/kullanicilar"

	_ "blockchain-smart-tender-platform/cmd/server/docs" // Docs generated by Swaggo

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/compress"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	fiberSwagger "github.com/swaggo/fiber-swagger"
)

var adminConfig = fiber.Config{
	Prefork:      false,
	BodyLimit:    1024 * 1024 * 1024,
	JSONEncoder:  json.Marshal,
	JSONDecoder:  json.Unmarshal,
	ErrorHandler: ErrorHandler,
}

func Run() {

	chaincodeID := "blockbid13"
	if chaincodeID == "" {
		log.Fatal("CHAINCODE_ID is not set in .env file!")
	}
	constants.ChaincodeID = chaincodeID
	app := fiber.New(adminConfig)
	app.Use(compress.New())
	app.Use(logger.New())
	// CORS için Middleware yapılandırması
	app.Use(cors.New(cors.Config{
		AllowOrigins: "http://localhost:3000",
		AllowHeaders: "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization",
		AllowMethods: "GET, POST, HEAD, OPTIONS, PUT, DELETE, PATCH",
	}))
	app.Get("/swagger/*", fiberSwagger.WrapHandler)
	app.Post("/api/v1/login", Login.LoginUser)
	app.Post("/api/v1/signup", Login.SignUpUser)
	app.Post("/upload", Login.CreateDockerImage)
	app.Get("/api/auctions/check-and-close", Ihaleler.CheckAndCloseIhales)

	app.Use(Login.AuthMiddleware)

	// Admin routes
	routes.Routes(app)

	go func() {
		ticker := time.Tick(10 * time.Second)
		for range ticker {
			err := sendRequest()
			if err != nil {
				log.Println("Request error:", err)
			}
		}
	}()

	log.Fatal(app.Listen("0.0.0.0:7706"))
}

func sendRequest() error {
	_, err := http.Get("http://localhost:7706/api/auctions/check-and-close")
	if err != nil {
		return err
	}
	return nil
}
